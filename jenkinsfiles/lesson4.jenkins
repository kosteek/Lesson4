#!groovy

properties([disableConcurrentBuilds()])

pipeline {
    agent {
        label 'master'
    }
    parameters {
         choice(choices: ['Compile and build', 'Compile, build and deploy', 'Only deploy'], name: 'DEPLOY')
    }
    triggers { pollSCM('* * * * *') }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    environment {
        IMAGE_VER = "0.0.${env.BUILD_ID}"
        registry = "kosteek/lesson4" 
        registryCredential = 'dockerhub_id' 
        dockerImage = ''
        dockerImageLatest = ''
    }
    stages {
        stage("Compile") {
            when {
                expression {params.DEPLOY == "Compile and build" || params.DEPLOY == "Compile, build and deploy"}
            }
            agent {
                docker {
                    image 'golang:1.16-alpine'
                }
            }
            steps {
                script {
                    sh 'cd ${GOPATH}/src'
                    sh 'mkdir -p ${GOPATH}/src/MY_PROJECT_DIRECTORY'
                    sh 'cp ${WORKSPACE}/main.go ${GOPATH}/src/MY_PROJECT_DIRECTORY'
                    sh 'cd ${GOPATH}/src/MY_PROJECT_DIRECTORY'
                    sh 'go mod init go.mod &&  go mod tidy && GOCACHE=${GOPATH}/src/MY_PROJECT_DIRECTORY go get -u github.com/go-sql-driver/mysql && GOCACHE=${GOPATH}/src/MY_PROJECT_DIRECTORY CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o ${WORKSPACE}/app . '
                }
                stash includes: 'app', name: 'app' 
            }
        }
        stage("Build") {
            when {
                expression {params.DEPLOY == "Compile and build" || params.DEPLOY == "Compile, build and deploy"}
            }
            steps {
                unstash 'app'
                script {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    dockerImageLatest = docker.build registry
                }
            }
        }
        stage('Deploy image') {
            when {
                expression {params.DEPLOY == "Compile and build" || params.DEPLOY == "Compile, build and deploy"}
            }
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push()
                        dockerImageLatest.push()
                    }
                } 
            }
        }
        stage('Cleaning up') {
            when {
                expression {params.DEPLOY == "Compile and build" || params.DEPLOY == "Compile, build and deploy"}
            }
            steps { 
                sh "docker rmi $registry:$BUILD_NUMBER"
                sh "docker rmi $registry" 
            }
        } 
        stage("Deploy to k8s") {
            when {
                expression {params.DEPLOY == "Compile, build and deploy" || params.DEPLOY == "Only deploy"}
            }
            steps {
                sh "docker save myapp:${IMAGE_VER} > myapp.tar"
                sh 'scp -P2222 myapp.tar vagrant@10.0.2.2:/home/vagrant'
                sh "ssh -p2222 vagrant@10.0.2.2 'docker load < /home/vagrant/myapp.tar && rm /home/vagrant/myapp.tar'"
                sh "sed -i 's|{{VER}}|${IMAGE_VER}|g' deployment.yml"
                sh 'scp -P2222 deployment.yml vagrant@10.0.2.2:/home/vagrant'
                sh 'scp -P2222 statefulset.yml vagrant@10.0.2.2:/home/vagrant'
                sh 'scp -P2222 service_mysql.yml vagrant@10.0.2.2:/home/vagrant'
                sh 'scp -P2222 configmap.yml vagrant@10.0.2.2:/home/vagrant'
                sh 'scp -P2222 service_myapp.yml vagrant@10.0.2.2:/home/vagrant'
                sh 'scp -P2222 ingress.yml vagrant@10.0.2.2:/home/vagrant'
                sh "ssh -p2222 vagrant@10.0.2.2 'kubectl apply -f /home/vagrant/configmap.yml -f /home/vagrant/statefulset.yml -f /home/vagrant/service_mysql.yml -f /home/vagrant/deployment.yml  -f /home/vagrant/service_myapp.yml -f /home/vagrant/ingress.yml'"
            }
        }
    }
    post {
        always {
            emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Job'
        }
    }
}
